name: Build Latest

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths-ignore:
      - .github/workflows/build-historic.yml
      - README.md
  schedule:
    - cron: '0 0 1 * *'
permissions: write-all

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        scheme: [basic, small, medium, full]
    name: Build [2022, latest]-${{ matrix.scheme }}
    runs-on: ubuntu-latest
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v3
      - name: Prepare
        run: |
          sed -i 's#tug/historic/systems/texlive/${VERSION}/tlnet-final#tex/systems/texlive/tlnet#' setup.sh
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKER_PASSWD }}
      - name: Build and export to Docker
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          load: true
          build-args: SCHEME=${{ matrix.scheme }}
          tags: texlive:${{ matrix.scheme }}
      - name: Test
        run: |
          docker run --rm texlive:${{ matrix.scheme }} pdflatex --version
          cat <<EOF >test.tex
          \documentclass{article}
          \usepackage{amsfonts}
          \begin{document}
          test
          \end{document}
          EOF
          docker run --rm -v $(pwd):/data -w /data texlive:${{ matrix.scheme }} pdflatex test.tex
          file test.pdf | grep -q ' PDF '
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          push: true
          build-args: SCHEME=${{ matrix.scheme }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/texlive:latest-${{ matrix.scheme }}
            ghcr.io/${{ github.repository_owner }}/texlive:2022-${{ matrix.scheme }}
            ${{ github.repository_owner }}/texlive:latest-${{ matrix.scheme }}
            ${{ github.repository_owner }}/texlive:2022-${{ matrix.scheme }}
      - name: Tag year for scheme-full
        uses: docker/build-push-action@v2
        if: ${{ matrix.scheme == 'full' }}
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          push: true
          build-args: SCHEME=${{ matrix.scheme }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/texlive:latest
            ghcr.io/${{ github.repository_owner }}/texlive:2022
            ${{ github.repository_owner }}/texlive:latest
            ${{ github.repository_owner }}/texlive:2022
  build-with-doc:
    strategy:
      matrix:
        scheme: [basic, small, medium, full]
    name: Build [2022, latest]-${{ matrix.scheme }}-doc
    runs-on: ubuntu-latest
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v3
      - name: Prepare
        run: |
          sed -i 's#tug/historic/systems/texlive/${VERSION}/tlnet-final#tex/systems/texlive/tlnet#' setup.sh
          sed -i 's#tlpdbopt_install_docfiles 0#tlpdbopt_install_docfiles 1#' texlive.profile
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKER_PASSWD }}
      - name: Build and export to Docker
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          load: true
          build-args: SCHEME=${{ matrix.scheme }}
          tags: texlive:${{ matrix.scheme }}
      - name: Test
        run: |
          docker run --rm texlive:${{ matrix.scheme }} pdflatex --version
          cat <<EOF >test.tex
          \documentclass{article}
          \usepackage{amsfonts}
          \begin{document}
          test
          \end{document}
          EOF
          docker run --rm -v $(pwd):/data -w /data texlive:${{ matrix.scheme }} pdflatex test.tex
          file test.pdf | grep -q ' PDF '
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          push: true
          build-args: SCHEME=${{ matrix.scheme }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/texlive:latest-${{ matrix.scheme }}-doc
            ghcr.io/${{ github.repository_owner }}/texlive:2022-${{ matrix.scheme }}-doc
            ${{ github.repository_owner }}/texlive:latest-${{ matrix.scheme }}-doc
            ${{ github.repository_owner }}/texlive:2022-${{ matrix.scheme }}-doc
      - name: Tag year for scheme-full
        uses: docker/build-push-action@v2
        if: ${{ matrix.scheme == 'basic' }}
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          push: true
          build-args: SCHEME=${{ matrix.scheme }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/texlive:latest-doc
            ghcr.io/${{ github.repository_owner }}/texlive:2022-doc
            ${{ github.repository_owner }}/texlive:latest-doc
            ${{ github.repository_owner }}/texlive:2022-doc
  final:
    name: Clean-up and add README
    if: ${{ always() }}
    needs: [build, build-with-doc]
    runs-on: ubuntu-latest
    steps:
      - name: Delete untagged
        uses: dylanratcliffe/delete-untagged-containers@main
        with:
          package_name: texlive
          token: ${{ secrets.PAT }}
          user: ${{ github.repository_owner }}
      - name: Set up Git repository
        uses: actions/checkout@v3
      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKER_PASSWD }}
          repository: ${{ github.repository_owner }}/texlive
          short-description: "Dockerized texlive with various schemes"
          readme-filepath: README.md